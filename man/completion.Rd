% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/completion_API.R
\name{completion}
\alias{completion}
\title{Make a completion request to the OpenAI API}
\usage{
completion(
  prompt_content,
  model = "text-davinci-003",
  suffix = NULL,
  max_tokens = 2048,
  temperature = 0.7,
  top_p = 1,
  n = 1,
  logprobs = NULL,
  echo = TRUE,
  stop_char = NULL,
  presence_penalty = 0,
  frequency_penalty = 0,
  best_of = 1,
  simplify = TRUE
)
}
\arguments{
\item{prompt_content}{The prompt to generate completions for, encoded as a string.}

\item{model}{OpenAI model used for completion.}

\item{suffix}{The suffix that comes after a completion of inserted text.}

\item{max_tokens}{The maximum number of tokens to generate in the completion.}

\item{temperature}{What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.}

\item{top_p}{An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10\% probability mass are considered.}

\item{n}{How many completions to generate for the prompt.}

\item{logprobs}{Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.}

\item{echo}{Whether echo back the prompt and the suffix in addition to the completion.}

\item{stop_char}{Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. Input as a vector.}

\item{presence_penalty}{Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.}

\item{frequency_penalty}{Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.}

\item{best_of}{Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). When used with n, best_of controls the number of candidate completions and n specifies how many to return.}

\item{simplify}{Whether to output the completion directly or return the complete HTTP request content.}
}
\value{
completion in text format or a full HTTP request content.
}
\description{
Given a prompt, the model will return one or more predicted completions, and can also return the probabilities of alternative tokens at each position.
}
\details{
\code{stream}, \code{logit_bias} and \code{user} parameter are not supported currently.
}
